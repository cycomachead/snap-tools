<blocks app="Snap! 4.0, http://snap.berkeley.edu" version="1">
    <block-definition s="label %'text' of size %'size'" type="command" category="pen">
        <header/>
        <code/>
        <inputs>
            <input type="%txt">Hello!</input>
            <input type="%n">12</input>
        </inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list>
                        <l>text</l>
                        <l>size</l>
                    </list>
                    <l>
                        var stage    = this.parentThatIsA(StageMorph),
                            context  = stage.penTrails().getContext('2d'),
                            rotation = radians(this.direction() - 90),
                            trans    = new Point(this.center().x - stage.left(),
                                                 this.center().y - stage.top()),
                            isWarped = this.isWarped,
                            len, pos;

                        if (isWarped) {
                            this.endWarp();
                        }

                        context.save();
                        // Set font properties
                        context.font =  size + 'pt monospace';
                        context.textAlign = 'left';
                        context.textBaseline = 'alphabetic';
                        context.fillStyle = this.color.toString();

                        // Make sure length is calculated with correct canvas properties
                        len = context.measureText(text).width;
                        // Translate canvas for proper rotations
                        // Note: the translation point is shifted inversely to the stage scale
                        trans = trans.multiplyBy(1 / stage.scale);
                        context.translate(trans.x, trans.y);
                        context.rotate(rotation);
                        context.fillText(text, 0, 0);
                        context.translate(-trans.x, -trans.y);
                        context.restore();

                        // Handle movement of sprite to text end
                        // Currently this only handles LTR text correctly.
                        // RTL would require negating the length.
                        // Note sin is X and cos is Y due to Logo based coordinate system
                        pos = new Point(len * Math.sin(radians(this.direction())),
                                        len * Math.cos(radians(this.direction())));

                        pos = pos.add(new Point(this.xPosition(), this.yPosition()));

                        this.gotoXY(pos.x, pos.y, false);

                        this.changed();

                        if (isWarped) {
                            this.startWarp();
                        }

                        // Explicitly redraw the entire stage so all text shows.
                        stage.changed();
                    </l>
                </block>
                <list>
                    <block var="text"/>
                    <block var="size"/>
                </list>
            </block>
        </script>
    </block-definition>
</blocks>
